/*
    Author : RAJON BARDHAN
    AUST CSE 27th Batch
    All my programming success are dedicated to my mom , dad , little sister madhobi , teachers , friends and love TANIA SULTANA RIMY

    ALGORITHM : SCC
*/

#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define memo(a,b) memset(a,b,sizeof(a))
#define INF 1e9
#define EPS 1e-8
#define PI 3.14159265358979323846

typedef long long ll ;
typedef unsigned long long ull ;


/* int dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* int dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* int dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* int dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction
int N , t , cycle , dt[50000+10] , ft[50000+10] , ct[50000+10] , indegree[50000+10] , cycleSize[50000+10] , cnt[50000+10] , check[50000+10]   ;
bool visit[50000+10];
vector <int> G[50000+10] , GT[50000+10] , Q ;
void dfs1(int u)
{
    visit[u] = true ;
    dt[u] = ++t ;
    for(int i=0;i<G[u].size();i++)
    {
        int v = G[u][i] ;
        if(!visit[v]) dfs1(v);
    }
    ft[u] = ++t ;
    Q.pb(u);
}
void dfs2(int u,int cmp)
{
    visit[u] = false ;
    ct[u] = cycle ;
    cycleSize[cycle]++;
    for(int i=0;i<GT[u].size();i++)
    {
        int v = GT[u][i] ;
        if(visit[v]&&cmp>ft[v]) dfs2(v,cmp);
    }
}
int dfs3(int u,int prev)
{
    check[ct[u]] = prev ;
    if(cnt[ct[u]]!=-1) return cnt[ct[u]] ;
    cnt[ct[u]] = cycleSize[ct[u]] ;
    for(int i=0;i<G[u].size();i++)
    {
        int v = G[u][i] ;
        if(ct[u]!=ct[v]&&check[ct[v]]!=prev) cnt[ct[u]]+=dfs3(v,prev);
    }
    return cnt[ct[u]] ;
}
void Reset(int N)
{
    Q.clear();
    t = 0 ;
    cycle = 1 ;
    for(int i=0;i<=N;i++)
    {
        visit[i] = false ;
        G[i].clear();
        GT[i].clear();
        cnt[i] = -1 ;
        indegree[i] = 0 ;
        cycleSize[i] = 0 ;
        check[i] = 0 ;
    }
}
int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    int T ;
    cin >> T ;
    for(int cas=1;cas<=T;cas++)
    {
        scanf("%d",&N);
        Reset(N);
        for(int i=1;i<=N;i++)
        {
            int u , v ;
            scanf("%d%d",&u,&v);
            G[u].pb(v);
            GT[v].pb(u);
        }
        for(int i=1;i<=N;i++) if(!visit[i]) dfs1(i);
        for(int i=Q.size()-1;i>=0;i--) if(visit[Q[i]]) { dfs2(Q[i],ft[Q[i]]); cycle++; }
        for(int u=1;u<=N;u++)
        {
            for(int i=0;i<G[u].size();i++)
            {
                int v = G[u][i] ;
                if(ct[u]!=ct[v]) indegree[ct[v]]++;
            }
        }
        int so_far = -1 , ans = -1 ;
        for(int i=1;i<=N;i++)
        {
            if(indegree[ct[i]]==0&&cnt[ct[i]]==-1)
            {
                int t = dfs3(i,i);
                if(t>so_far) so_far = t , ans = i ;
            }
        }
        printf("Case %d: %d\n",cas,ans);
    }
    return 0;
}
