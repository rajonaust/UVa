/*
    Author : RAJON BARDHAN
    AUST CSE 27th Batch
    All my programming success are dedicated to my mom , dad , little sister madhobi , teachers , friends and love TANIA SULTANA RIMY

    Problem Name : 10342 - Always Late ( UVa )
    ALGORITHM : Floyd Warshall
*/

#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define memo(a,b) memset(a,b,sizeof(a))
#define INF 1e9
#define EPS 1e-8
#define PI 3.14159265358979323846

typedef long long ll ;
typedef unsigned long long ull ;

/* int dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* int dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* int dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* int dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction

int n , r , q , Set , dist[110][110] , w[110][110] ;
vector < pair<int,int> > G[110] ;

void dfs(int s,int u,int c)
{
    if(c>w[s][u]) return ;
    if(c>dist[s][u]) w[s][u] = c ;
    for(int i=0;i<G[u].size();i++)
    {
        int v = G[u][i].ff ;
        dfs(s,v,c+G[u][i].ss);
    }
}

void floyd_warshall()
{
    for(int k=0;k<n;k++)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                dist[i][j] = min(dist[i][j],dist[i][k]+dist[k][j]) ;
            }
        }
    }
}

void Reset()
{
    for(int i=0;i<=100;i++)
    {
        for(int j=0;j<=100;j++) dist[i][j] = w[i][j] = INF ;
        dist[i][i] = 0 ;
        G[i].clear();
    }
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    while( cin >> n >> r )
    {
        Reset();
        while( r-- )
        {
            int u , v , w ;
            cin >> u >> v >> w ;

            dist[u][v] = w ;
            dist[v][u] = w ;
            G[u].pb(mp(v,w));
            G[v].pb(mp(u,w));
        }

        floyd_warshall();
        for(int i=0;i<n;i++) for(int j=0;j<n;j++) if(dist[i][j]!=INF) dfs(i,i,0);

        cout << "Set #" << ++Set << endl ;
        cin >> q ;

        while( q-- )
        {
            int u , v ;
            cin >> u >> v ;
            if(w[u][v]==INF) cout << "?" << endl ;else cout << w[u][v] << endl ;
        }
    }
    return 0;
}
