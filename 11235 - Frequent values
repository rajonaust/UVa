/*
    Author : RAJON BARDHAN
    AUST CSE 27th Batch
    All my programming success are dedicated to my mom , dad , little sister madhobi , teachers , friends and love TANIA SULTANA RIMY

    Problem Name : 11235 - Frequent values ( UVa )
    ALGORITHM : MO's Algorithm
*/

#include <bits/stdc++.h>
using namespace std;

#define pb push_back
#define ff first
#define ss second
#define mp make_pair
#define memo(a,b) memset(a,b,sizeof(a))
#define INF 1e9
#define EPS 1e-8
#define PI 3.14159265358979323846

typedef long long ll ;
typedef unsigned long long ull ;

/* int dx[] = {1,-1,0,0} , dy[] = {0,0,1,-1}; */ // 4 Direction
/* int dx[] = {1,-1,0,0,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1,1,-1}; */ // 8 Direction
/* int dx[] = {1,-1,1,-1,2,2,-2,-2} , dy[] = {2,2,-2,-2,1,-1,1,-1}; */ // Knight Direction
/* int dx[] = {2,-2,1,1,-1,-1} , dy[] = {0,0,1,-1,1,-1}; */ // Hexagonal Direction

int N , Q , arr[100000+10] , ans[100000+10] , cnt[200000+10] , freq[200000+10] , maxi , block = 550 ;

struct Node
{
    int L , R , id ;
    bool operator < (const Node &A) const
    {
        if(L/block == A.L/block) return R < A.R ;
        else return L/block < A.L/block ;
    }
}input[100000+10];

void add(int index)
{
    if(index==0) return ;
    if(cnt[arr[index]]!=0) freq[cnt[arr[index]]]--;
    cnt[arr[index]]++;
    freq[cnt[arr[index]]]++;
    if(cnt[arr[index]]>maxi) maxi = cnt[arr[index]] ;
}

void remove(int index)
{
    if(index==0) return ;
    freq[cnt[arr[index]]]--;
    if(freq[maxi]==0) maxi--;
    cnt[arr[index]]--;
    if(cnt[arr[index]]!=0)freq[cnt[arr[index]]]++;
}

int main()
{
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    while( scanf("%d",&N)==1 && N!=0 )
    {
        scanf("%d",&Q);
        for(int i=1;i<=N;i++)
        {
            scanf("%d",&arr[i]);
            arr[i]+=100000;
        }
        for(int i=1;i<=Q;i++)
        {
            scanf("%d%d",&input[i].L,&input[i].R);
            input[i].id = i ;
        }
        sort(input+1,input+Q+1);
        int currentL = 0 , currentR = 0 ;
        for(int i=1;i<=Q;i++)
        {
            int L = input[i].L , R = input[i].R ;
            while( currentL < L ) remove(currentL++);
            while( currentL > L ) add(--currentL) ;
            while( currentR < R ) add(++currentR);
            while( currentR > R ) remove(currentR--);
            ans[input[i].id] = maxi ;
        }
        for(int i=1;i<=Q;i++) printf("%d\n",ans[i]);
        for(int i=0;i<=200000;i++) freq[i] = cnt[i] = maxi = 0 ;
    }
    return 0;
}
